constants:
    array of constants used by ASTs or instruction
    always contains nil as 1st constant, $i as 2nd, 0b as 3rd and 1b as 4th
    example:
        constants = [3.5, "a string", 42, 0b, $i, "i"]
    for a ountt:
        0x49 64bits(for int value)
    for a string:
        0x53 (chars of the string as 1byte each NULL terminated)
    for a floap:
        0x46 64bits(convert floap to double and memcpy)

    

Asts:
    array of index of asts in the bytecode
    example:
        Asts = [0,10] # made by the interpreter


PASS:
    0x00 

FOR:
    0x01 64bits(var name idx in constants) 64bits(start AST idx) 64bits(end AST idx) 64bits(END_FOR idx)

END_FOR:
    0x02 64bits(FOR idx)

WHILE
    0x01 64bits(start AST idx) 64bits(END_WHILE idx)

END_WHILE:
    0x02 64bits(WHILE idx)

PROCEED:
    0x03 0x01 64bits(FOR / WHILE idx) 

STOP:
    0x03 0x01 64bits(END_FOR / END_WHILE idx) 

GOTO:
    0x03 0x00 64bits(label name idx in constants)

END_AST / END_CONSTANTS / END_INSTRUCTION:
    0x00 0x00 0x00 0x00 0x00 0x00 (indicate definition of all ast is finished)



ast -> push / operation

    +       -> push a; push b; add;
a       b   -> stack_max_len=2 (bc. 2 push)

            +       -> push a; push b; mul; push c; add;
    *           c   -> constants = ["a", "b", "c"] 
a       b           ->     ________________________________________________________
                           |              |              |    |              |    |
(64bits)0x03 (64bits)0x05  0x01 0x01 0x00 0x01 0x01 0x01 0x04 0x01 0x01 0x02 0x03



AST : 64bits(stack max len) 64bits(AST_instruction len) ast_instructions;

ast_instructions:
    push : 0x01 (0x01/0x02 (varcall / constants idx)) 64bits(idx)
        ex: push a; = 0x01 0x01 (64bits)0x00   (constants = ["a", 90])
        ex: push 90; = 0x01 0x02 (64bits)0x01   (constants = ["a", 90])
        ex: push "a"; = 0x01 0x02 (64bits)0x00  (constants = ["a", 90])


    push_funccall : 
                    push each arg from right to left (f(a, b , c) -> push c push b oush c)
                    0x02 64bits(func_name idx in constants) 64bits(nbr of arg)
    add : 0x03
    sub : 0x03
    mul : 0x04



################ bytecode file format #################

magical number      |   0x2e 0x53 0x63 0x2e
constants section   |   64bits(nbr of constants)
                    |   constants
                    |   0x00 0x00 0x00 0x00 0x00 0x00
asts section        |   64bits(nbr of ast)
                    |   asts
                    |   0x00 0x00 0x00 0x00 0x00 0x00
instructions sec    |   64(bits nbr of instructions)
                    |   instructions
                    |   0x00 0x00 0x00 0x00 0x00 0x00